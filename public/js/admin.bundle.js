(function(window, document) {
'use strict';
console.log('üöÄ [STARTUP] dashboard-manager-2025.js INICIANDO - VERSI√ìN ANTI-CACH√â 2025-09-15 16:30:00');console.log('üîß [STARTUP] Verificando timestamp √∫nico:', Date.now());class AdminDashboard {constructor() {console.log('üèóÔ∏è [CONSTRUCTOR] AdminDashboard iniciando construcci√≥n...');this.currentUser = null;this.isLoggedIn = false;this.academicChart = null;this.dashboardData = {};this.refreshInterval = null;this.adminCredentials = {username: 'admin',password: 'admin123',role: 'director',name: 'Administrador del Sistema'};console.log('üîß [DEBUG] Inicializando realDataConfig... [VERSI√ìN ACTUALIZADA 2025-09-15 16:30:00]');console.log('üì¶ [DEBUG] Datos en localStorage:', {totalStudents: localStorage.getItem('realData_totalStudents'),totalTeachers: localStorage.getItem('realData_totalTeachers'),totalSubjects: localStorage.getItem('realData_totalSubjects'),generalAverage: localStorage.getItem('realData_generalAverage')});this.realDataConfig = {totalStudents: parseInt(localStorage.getItem('realData_totalStudents')) || 1247,totalTeachers: parseInt(localStorage.getItem('realData_totalTeachers')) || 68,totalSubjects: parseInt(localStorage.getItem('realData_totalSubjects')) || 42,generalAverage: parseFloat(localStorage.getItem('realData_generalAverage')) || 8.4};console.log('‚öôÔ∏è [DEBUG] realDataConfig inicializado:', this.realDataConfig);this.init();setTimeout(() => {updateRefreshButtonState();}, 1000);console.log('‚úÖ [CONSTRUCTOR] AdminDashboard construcci√≥n completada');}async init() {console.log('üîÑ [INIT] Iniciando sistema AdminDashboard...');await this.checkAuthentication();this.setupInterface();if (this.isLoggedIn && this.isAdmin()) {await this.loadDashboardData();this.showDashboard();this.updateDashboardUI();this.displayPendingRegistrations();this.startAutoRefresh();} else {this.showLoginPrompt();}console.log('‚úÖ [INIT] Sistema AdminDashboard inicializado correctamente');}setupInterface() {if (typeof this.initializeSystem === 'function') {this.initializeSystem();}}async checkAuthentication() {if (window.secureAdminAuth && window.secureAdminAuth.isUserAuthenticated()) {this.currentUser = window.secureAdminAuth.getUserInfo();this.isLoggedIn = true;return;}try {const secureSession = localStorage.getItem('secure_admin_session');if (secureSession) {const sessionData = JSON.parse(secureSession);if (sessionData.token && sessionData.expiresAt && Date.now() < sessionData.expiresAt) {this.currentUser = sessionData.user || { role: 'admin' };this.isLoggedIn = true;return;}}} catch (error) {console.warn('‚ö†Ô∏è Error verificando sesi√≥n segura:', error);}if (window.authInterface && window.authInterface.isAuthenticated()) {this.currentUser = window.authInterface.getCurrentUser();this.isLoggedIn = true;return;}this.isLoggedIn = false;}isAdmin() {if (this.currentUser && this.currentUser.role === 'admin') {return true;}if (this.currentUser &&['administrativo', 'directivo'].includes(this.currentUser.tipo_usuario)) {return true;}if (this.isLoggedIn && (!this.currentUser || Object.keys(this.currentUser).length === 0)) {return true;}return false;}showLoginPrompt() {alert('Acceso restringido: Debes iniciar sesi√≥n como administrador para acceder al dashboard.');setTimeout(() => {window.location.href = 'index.html';}, 1000);}showDashboard() {const dashboardSection = document.querySelector('.dashboard-section');if (dashboardSection) {dashboardSection.style.display = 'block';}const loginSection = document.querySelector('.login-section');if (loginSection) {loginSection.style.display = 'none';}}async loadDashboardData() {try {console.log('üìä [DASHBOARD] Cargando datos del dashboard...');await this.loadPendingRegistrations();const [analytics, students, teachers] = await Promise.all([this.loadAnalytics(),this.loadStudentsData(),this.loadTeachersData()]);const hasCustomConfig = localStorage.getItem('realData_customConfigured') === 'true';console.log('üîç [DEBUG] Configuraci√≥n personalizada detectada:', hasCustomConfig);const finalStats = hasCustomConfig ? {totalStudents: parseInt(localStorage.getItem('realData_totalStudents')) || parseInt(this.realDataConfig.totalStudents),totalTeachers: parseInt(localStorage.getItem('realData_totalTeachers')) || parseInt(this.realDataConfig.totalTeachers),totalSubjects: parseInt(localStorage.getItem('realData_totalSubjects')) || parseInt(this.realDataConfig.totalSubjects),generalAverage: parseFloat(localStorage.getItem('realData_generalAverage')) || parseFloat(this.realDataConfig.generalAverage)} : {totalStudents: analytics?.students?.total_estudiantes || students?.overview?.totalStudents || parseInt(this.realDataConfig.totalStudents),totalTeachers: analytics?.teachers?.total_docentes || students?.overview?.totalTeachers || parseInt(this.realDataConfig.totalTeachers),totalSubjects: analytics?.academic?.materias_activas || students?.overview?.totalSubjects || parseInt(this.realDataConfig.totalSubjects),generalAverage: analytics?.academic?.promedio_general || students?.overview?.generalAverage || parseFloat(this.realDataConfig.generalAverage)};console.log('üìä [DEBUG] Estad√≠sticas finales calculadas:', finalStats);this.dashboardData = {analytics: analytics,students: students.students || [],teachers: teachers.teachers || teachers,statistics: finalStats,lastUpdate: new Date().toISOString()};console.log('‚úÖ [DEBUG] Dashboard data final estructurado:', this.dashboardData.statistics);} catch (error) {console.error('‚ùå Error cargando dashboard:', error);this.showErrorState(error);}}async loadAnalytics() {try {if (!window.apiClient) {throw new Error('API client no disponible');}const response = await window.apiClient.request('/analytics/dashboard');if (response.success) {return response.data;}throw new Error('Error en respuesta de analytics');} catch (error) {console.warn('üìä Analytics API no disponible, usando datos demo');return this.getDemoAnalytics();}}async loadStudentsData() {try {if (!window.apiClient) {throw new Error('API client no disponible');}const response = await window.apiClient.request('/students?limit=10');if (response.success) {return response.data;}throw new Error('Error en respuesta de estudiantes');} catch (error) {console.warn('üë• Students API no disponible, usando datos demo');return this.getDemoStudents();}}async loadTeachersData() {try {if (!window.apiClient) {throw new Error('API client no disponible');}const response = await window.apiClient.request('/teachers?limit=10');if (response.success) {return response.data;}throw new Error('Error en respuesta de docentes');} catch (error) {console.warn('üë®‚Äçüè´ Teachers API no disponible, usando datos demo');return this.getDemoStudents().teachers;}}getDemoAnalytics() {return {students: {total_estudiantes: 1247,estudiantes_activos: 1180,egresados: 67,suspendidos: 0,especialidades_activas: 3},teachers: {total_docentes: 68,docentes_base: 45,docentes_contrato: 18,docentes_honorarios: 5,promedio_experiencia: 8.5},academic: {materias_activas: 42,cursos_disponibles: 18,inscripciones_totales: 8546,promedio_general: 8.4},chatbot: {total_mensajes: 3245,conversaciones_unicas: 876,satisfaccion_promedio: 4.3,mensajes_semana: 245}};}getDemoStudents() {return {overview: {totalTeachers: 68,totalSubjects: 42,generalAverage: 8.4},students: [{id: '20230001',name: 'Ana Mar√≠a Gonz√°lez P√©rez',semester: '3¬∞',average: 8.5,status: 'Activo',riskLevel: 'Bajo'},{id: '20230002',name: 'Carlos Eduardo Mart√≠nez L√≥pez',semester: '5¬∞',average: 7.2,status: 'Activo',riskLevel: 'Medio'},{id: '20230003',name: 'Mar√≠a Jos√© Hern√°ndez Garc√≠a',semester: '1¬∞',average: 9.1,status: 'Activo',riskLevel: 'Bajo'},{id: '20230004',name: 'Diego Alejandro Ram√≠rez Torres',semester: '3¬∞',average: 5.8,status: 'En Riesgo',riskLevel: 'Alto'},{id: '20230005',name: 'Fernanda Isabel Morales Cruz',semester: '5¬∞',average: 8.9,status: 'Activo',riskLevel: 'Bajo'}],teachers: [{id: 'DOC001',name: 'Lic. Roberto Mendoza',specialty: 'Matem√°ticas',subjects: ['Matem√°ticas I', 'Matem√°ticas III', 'C√°lculo'],workload: 25,status: 'Activo'},{id: 'DOC002',name: 'Ing. Mar√≠a Elena Torres',specialty: 'F√≠sica',subjects: ['F√≠sica I', 'F√≠sica III'],workload: 20,status: 'Activo'},{id: 'DOC003',name: 'Q.F.B. Ana Luisa Ram√≠rez',specialty: 'Qu√≠mica',subjects: ['Qu√≠mica I', 'Qu√≠mica III', 'Bioqu√≠mica'],workload: 22,status: 'Activo'},{id: 'DOC004',name: 'Lic. Patricia Morales',specialty: 'Espa√±ol',subjects: ['Espa√±ol I', 'Espa√±ol III', 'Literatura'],workload: 18,status: 'Activo'}],finances: {monthlyIncome: 2847500,pendingPayments: 157500,collectionRate: 94.5}};}showErrorState(error) {console.error('‚ùå Error en el dashboard - Modo de prueba activado', error);const errorMessage = `<div class="alert alert-warning" role="alert"><i class="fas fa-exclamation-triangle me-2"></i><strong>Modo de Desarrollo:</strong> Usando datos de prueba.Algunas funciones pueden estar limitadas.<br><small class="text-muted">Error: ${error?.message || 'Error desconocido'}</small></div>`;const dashboardContainer = document.querySelector('.dashboard-section') ||document.querySelector('#adminPanel') ||document.body;if (dashboardContainer) {dashboardContainer.insertAdjacentHTML('afterbegin', errorMessage);}}initializeSystem() {const savedSession = localStorage.getItem('adminSession');if (savedSession) {this.currentSession = JSON.parse(savedSession);if (this.currentSession.expires > Date.now()) {this.isLoggedIn = true;this.showAdminPanel();} else {localStorage.removeItem('adminSession');}}}loginAdmin() {console.log('üîë [LOGIN] Iniciando proceso de login...');if (!this.adminCredentials) {console.error('‚ùå adminCredentials no est√° inicializado');this.adminCredentials = {username: 'admin',password: 'admin123',role: 'director',name: 'Administrador del Sistema'};}const username = document.getElementById('adminUsername').value;const password = document.getElementById('adminPassword').value;const role = document.getElementById('adminRole').value;console.log('üîç [LOGIN] Verificando credenciales...');if (username === this.adminCredentials.username &&password === this.adminCredentials.password &&role === this.adminCredentials.role) {console.log('‚úÖ [LOGIN] Credenciales correctas');this.currentSession = {username: username,role: role,name: this.adminCredentials.name,loginTime: Date.now(),expires: Date.now() + (8 * 60 * 60 * 1000) };localStorage.setItem('adminSession', JSON.stringify(this.currentSession));this.isLoggedIn = true;const loginModal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));loginModal.hide();this.showAdminPanel();this.showSuccessToast('Acceso administrativo exitoso');setTimeout(() => {this.scrollToDashboard();}, 1000);} else {console.log('‚ùå [LOGIN] Credenciales incorrectas');this.showErrorToast('Credenciales administrativas incorrectas');}}scrollToDashboard() {console.log('üìç [SCROLL] Intentando hacer scroll al dashboard...');const dashboardSection = document.getElementById('adminPanel');if (dashboardSection && !dashboardSection.classList.contains('d-none')) {setTimeout(() => {const navbarHeight = 90; const targetPosition = dashboardSection.offsetTop - navbarHeight;window.scrollTo({top: Math.max(0, targetPosition),behavior: 'smooth'});console.log('‚úÖ [SCROLL] Redirigiendo al panel de administraci√≥n');}, 500);} else {setTimeout(() => {const fallbackPosition = window.innerHeight * 0.8; window.scrollTo({top: fallbackPosition,behavior: 'smooth'});console.log('‚ö†Ô∏è [SCROLL] Dashboard no encontrado, usando posici√≥n estimada');}, 500);}}logoutAdmin() {console.log('üö™ [LOGOUT] Cerrando sesi√≥n administrativa...');localStorage.removeItem('adminSession');this.currentSession = null;this.isLoggedIn = false;this.dashboardData = {students: [],teachers: [],statistics: {totalStudents: 0,totalTeachers: 0,totalSubjects: 0,generalAverage: 0}};this.destroyCharts();this.hideAdminPanel();this.showSuccessToast('Sesi√≥n administrativa cerrada');}showAdminPanel() {console.log('üéõÔ∏è [PANEL] Mostrando panel administrativo...');document.getElementById('hero').style.display = 'none';document.body.style.paddingTop = '90px';document.body.style.transition = 'padding-top 0.3s ease';const adminPanel = document.getElementById('adminPanel');adminPanel.classList.remove('d-none');this.setupAdminInfo();this.updateDashboardUI();this.createAcademicChart();setTimeout(() => {const firstVisibleSection = document.querySelector('section:not(#hero)');if (firstVisibleSection) {const sectionTop = firstVisibleSection.offsetTop - 100; window.scrollTo({top: Math.max(0, sectionTop),behavior: 'smooth'});}}, 400);}hideAdminPanel() {console.log('üôà [PANEL] Ocultando panel administrativo...');const heroSection = document.getElementById('hero');heroSection.style.display = '';  heroSection.style.visibility = 'visible';heroSection.style.opacity = '1';document.body.style.paddingTop = '';document.body.style.transition = '';document.getElementById('adminPanel').classList.add('d-none');setTimeout(() => {window.scrollTo({ top: 0, behavior: 'smooth' });}, 150);}setupAdminInfo() {document.getElementById('adminName').textContent = this.currentSession.name;document.getElementById('adminRole').textContent = this.capitalizeRole(this.currentSession.role);}capitalizeRole(role) {const roles = {'director': 'Director','subdirector': 'Subdirector','coordinador': 'Coordinador Acad√©mico','secretaria': 'Secretaria Acad√©mica'};return roles[role] || role;}updateDashboardUI() {console.log('üé® [UI] Actualizando interfaz del dashboard...');const stats = this.dashboardData.statistics;if (stats) {const totalStudentsEl = document.getElementById('totalStudents');const totalTeachersEl = document.getElementById('totalTeachers');const totalSubjectsEl = document.getElementById('totalSubjects');const generalAverageEl = document.getElementById('generalAverage');if (totalStudentsEl) totalStudentsEl.textContent = stats.totalStudents.toLocaleString();if (totalTeachersEl) totalTeachersEl.textContent = stats.totalTeachers;if (totalSubjectsEl) totalSubjectsEl.textContent = stats.totalSubjects;if (generalAverageEl) generalAverageEl.textContent = stats.generalAverage;}this.loadStudentsTable();this.loadTeachersTable();}loadStudentsTable() {console.log('üìä [DEBUG] loadStudentsTable() iniciado - NUEVA VERSI√ìN');const tbody = document.getElementById('studentsTable');if (!tbody) {console.log('‚ùå [DEBUG] tabla studentsTable no encontrada');return;}tbody.innerHTML = '';if (!this.dashboardData) {console.log('‚ùå [DEBUG] dashboardData no existe');tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">Cargando datos...</td></tr>';return;}if (!this.dashboardData.students || !Array.isArray(this.dashboardData.students)) {console.log('‚ùå [DEBUG] students no es array v√°lido:', this.dashboardData.students);tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">No hay datos de estudiantes disponibles</td></tr>';return;}if (this.dashboardData.students.length === 0) {console.log('‚ÑπÔ∏è [DEBUG] students array est√° vac√≠o');tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">No hay estudiantes registrados</td></tr>';return;}console.log('‚úÖ [DEBUG] Procesando', this.dashboardData.students.length, 'estudiantes');try {this.dashboardData.students.forEach(student => {const row = document.createElement('tr');const statusBadge = this.getStudentStatusBadge(student.status);const riskBadge = this.getRiskLevelBadge(student.riskLevel);row.innerHTML = `<td><strong>${student.id}</strong></td><td>${student.name}</td><td class="text-center"><span class="badge bg-info">${student.semester}</span></td><td class="text-center"><span class="badge ${this.getGradeColorClass(student.average)}">${student.average}</span></td><td class="text-center">${statusBadge}${riskBadge}</td><td class="text-center"><div class="btn-group btn-group-sm" role="group"><button class="btn btn-outline-primary" onclick="viewStudent('${student.id}')" title="Ver Detalles"><i class="fas fa-eye"></i></button><button class="btn btn-outline-success" onclick="editStudent('${student.id}')" title="Editar"><i class="fas fa-edit"></i></button><button class="btn btn-outline-warning" onclick="contactStudent('${student.id}')" title="Contactar"><i class="fas fa-envelope"></i></button></div></td>`;tbody.appendChild(row);});} catch (error) {console.error('‚ùå [DEBUG] Error en loadStudentsTable:', error);tbody.innerHTML = '<tr><td colspan="6" class="text-center text-danger">Error cargando estudiantes</td></tr>';}}loadTeachersTable() {const tbody = document.getElementById('teachersTable');if (!tbody) return;tbody.innerHTML = '';this.dashboardData.teachers.forEach(teacher => {const row = document.createElement('tr');const statusBadge = teacher.status === 'Activo' ?'<span class="badge bg-success">Activo</span>' :'<span class="badge bg-secondary">Inactivo</span>';row.innerHTML = `<td><strong>${teacher.name}</strong></td><td>${teacher.specialty}</td><td><small>${teacher.subjects.join(', ')}</small></td><td class="text-center"><span class="badge bg-info">${teacher.workload}h</span></td><td class="text-center">${statusBadge}</td><td class="text-center"><div class="btn-group btn-group-sm" role="group"><button class="btn btn-outline-primary" onclick="viewTeacher('${teacher.id}')" title="Ver Detalles"><i class="fas fa-eye"></i></button><button class="btn btn-outline-success" onclick="editTeacher('${teacher.id}')" title="Editar"><i class="fas fa-edit"></i></button><button class="btn btn-outline-info" onclick="assignSubjects('${teacher.id}')" title="Asignar Materias"><i class="fas fa-book"></i></button></div></td>`;tbody.appendChild(row);});}getStudentStatusBadge(status) {switch (status) {case 'Activo':return '<span class="badge bg-success">Activo</span>';case 'En Riesgo':return '<span class="badge bg-danger">En Riesgo</span>';case 'Suspendido':return '<span class="badge bg-warning">Suspendido</span>';default:return '<span class="badge bg-secondary">Inactivo</span>';}}getRiskLevelBadge(riskLevel) {switch (riskLevel) {case 'Alto':return '<span class="badge bg-danger ms-1">Alto Riesgo</span>';case 'Medio':return '<span class="badge bg-warning ms-1">Riesgo Medio</span>';case 'Bajo':return '<span class="badge bg-success ms-1">Bajo Riesgo</span>';default:return '';}}getGradeColorClass(grade) {if (grade >= 9) return 'bg-success';if (grade >= 8) return 'bg-primary';if (grade >= 7) return 'bg-info';if (grade >= 6) return 'bg-warning';return 'bg-danger';}createAcademicChart() {const ctx = document.getElementById('academicChart');if (!ctx) return;if (typeof Chart === 'undefined') {console.warn('‚ö†Ô∏è Chart.js no est√° disponible, mostrando mensaje alternativo');ctx.parentElement.innerHTML = `<div class="text-center py-4"><i class="fas fa-chart-line fa-3x text-muted mb-3"></i><p class="text-muted">Gr√°ficos no disponibles</p><small class="text-muted">Chart.js no se pudo cargar desde CDN</small><br><button class="btn btn-sm btn-outline-primary mt-2" onclick="location.reload()"><i class="fas fa-refresh me-1"></i>Reintentar</button></div>`;return;}this.destroyCharts();const months = ['Ago', 'Sep', 'Oct', 'Nov', 'Dic', 'Ene'];const firstSemesterData = [8.2, 8.4, 8.6, 8.5, 8.7, 8.7];const thirdSemesterData = [7.8, 8.0, 8.2, 8.3, 8.4, 8.4];const fifthSemesterData = [7.9, 8.1, 8.0, 8.2, 8.3, 8.2];this.academicChart = new Chart(ctx, {type: 'line',data: {labels: months,datasets: [{label: '1¬∞ Semestre',data: firstSemesterData,borderColor: '#198754',backgroundColor: '#19875420',tension: 0.4,fill: false},{label: '3¬∞ Semestre',data: thirdSemesterData,borderColor: '#0d6efd',backgroundColor: '#0d6efd20',tension: 0.4,fill: false},{label: '5¬∞ Semestre',data: fifthSemesterData,borderColor: '#0dcaf0',backgroundColor: '#0dcaf020',tension: 0.4,fill: false}]},options: {responsive: true,maintainAspectRatio: false,scales: {y: {beginAtZero: false,min: 6,max: 10,ticks: {stepSize: 0.5}}},plugins: {legend: {position: 'top'},tooltip: {mode: 'index',intersect: false}},elements: {point: {radius: 4,hoverRadius: 6}}}});}destroyCharts() {if (this.academicChart) {this.academicChart.destroy();this.academicChart = null;}}async loadPendingRegistrations() {try {if (window.apiClient) {const response = await window.apiClient.request('/admin/pending-registrations');if (response.success) {this.dashboardData.pendingRegistrations = response.data;return;}}const localRegistrations = JSON.parse(localStorage.getItem('pending_registrations') || '[]');this.dashboardData.pendingRegistrations = localRegistrations;this.updatePendingCounter(localRegistrations.length);} catch (error) {console.warn('‚ö†Ô∏è Error cargando solicitudes:', error);this.dashboardData.pendingRegistrations = [];}}displayPendingRegistrations() {const container = document.getElementById('pending-registrations-container');if (!container) return;const registrations = this.dashboardData.pendingRegistrations || [];if (registrations.length === 0) {container.innerHTML = `<div class="text-center py-4"><i class="fas fa-inbox fa-3x text-muted mb-3"></i><p class="text-muted">No hay solicitudes pendientes</p></div>`;return;}const html = registrations.map(registration => `<div class="card mb-3" data-registration-id="${registration.email}"><div class="card-header d-flex justify-content-between align-items-center"><h6 class="mb-0"><i class="fas fa-user me-2"></i>${registration.nombre} ${registration.apellido_paterno}</h6><span class="badge bg-warning">Pendiente</span></div><div class="card-body"><div class="row"><div class="col-md-6"><p class="mb-1"><strong>Email:</strong> ${registration.email}</p><p class="mb-1"><strong>Tel√©fono:</strong> ${registration.telefono}</p><p class="mb-1"><strong>Tipo:</strong> ${this.formatUserType(registration.tipo_usuario)}</p>${registration.matricula ? `<p class="mb-1"><strong>Matr√≠cula:</strong> ${registration.matricula}</p>` : ''}</div><div class="col-md-6"><p class="mb-1"><strong>Fecha:</strong> ${new Date(registration.fecha_solicitud).toLocaleDateString('es-MX')}</p><p class="mb-1"><strong>Motivo:</strong></p><small class="text-muted">${registration.motivo}</small></div></div><div class="mt-3 d-flex gap-2"><button class="btn btn-success btn-sm" onclick="adminDashboard.approveRegistration('${registration.email}')"><i class="fas fa-check me-1"></i>Aprobar</button><button class="btn btn-danger btn-sm" onclick="adminDashboard.rejectRegistration('${registration.email}')"><i class="fas fa-times me-1"></i>Rechazar</button><button class="btn btn-info btn-sm" onclick="adminDashboard.viewRegistrationDetails('${registration.email}')"><i class="fas fa-eye me-1"></i>Ver Detalles</button></div></div></div>`).join('');container.innerHTML = html;}formatUserType(tipo) {const types = {'estudiante': 'üë®‚Äçüéì Estudiante','padre_familia': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Padre de Familia','docente': 'üë®‚Äçüè´ Docente','administrativo': 'üèõÔ∏è Personal Administrativo'};return types[tipo] || tipo;}async approveRegistration(email) {if (!confirm('¬øEst√°s seguro de aprobar esta solicitud?')) return;try {if (window.apiClient) {const response = await window.apiClient.request('/admin/approve-registration', {method: 'POST',body: { email }});if (response.success) {this.showToast('success', '‚úÖ Solicitud aprobada', 'Se ha enviado email al usuario');this.removeRegistrationFromLocal(email);this.displayPendingRegistrations();return;}}this.removeRegistrationFromLocal(email);this.showToast('success', '‚úÖ Solicitud marcada como aprobada', 'Contacta al usuario manualmente');this.displayPendingRegistrations();this.updatePendingCounter(this.dashboardData.pendingRegistrations.length);} catch (error) {console.error('Error aprobando registro:', error);this.showToast('danger', '‚ùå Error', 'No se pudo aprobar la solicitud');}}async rejectRegistration(email) {const reason = prompt('Motivo del rechazo (opcional):');if (reason === null) return; try {if (window.apiClient) {const response = await window.apiClient.request('/admin/reject-registration', {method: 'POST',body: { email, reason }});if (response.success) {this.showToast('info', 'üìß Solicitud rechazada', 'Se ha enviado email al usuario');this.removeRegistrationFromLocal(email);this.displayPendingRegistrations();return;}}this.removeRegistrationFromLocal(email);this.showToast('info', 'üìù Solicitud marcada como rechazada', 'Contacta al usuario manualmente');this.displayPendingRegistrations();this.updatePendingCounter(this.dashboardData.pendingRegistrations.length);} catch (error) {console.error('Error rechazando registro:', error);this.showToast('danger', '‚ùå Error', 'No se pudo rechazar la solicitud');}}removeRegistrationFromLocal(email) {const registrations = JSON.parse(localStorage.getItem('pending_registrations') || '[]');const filtered = registrations.filter(r => r.email !== email);localStorage.setItem('pending_registrations', JSON.stringify(filtered));this.dashboardData.pendingRegistrations = filtered;}updatePendingCounter(count) {const badge = document.getElementById('pending-count');const counter = document.getElementById('pending-counter');if (count > 0) {if (badge) {badge.textContent = count;badge.style.display = 'inline';}if (counter) {counter.textContent = `${count} pendientes`;counter.className = 'badge bg-warning me-2';}} else {if (badge) {badge.style.display = 'none';}if (counter) {counter.textContent = 'Sin solicitudes';counter.className = 'badge bg-success me-2';}}}showToast(type, title, message) {if (window.authInterface && window.authInterface.showToast) {window.authInterface.showToast(type, title, message);} else {}}refreshDashboard() {console.log('üîÑ [REFRESH] Actualizando dashboard...');this.showLoadingToast('Actualizando dashboard...');setTimeout(async () => {await this.loadDashboardData();this.updateDashboardUI();this.createAcademicChart();this.showSuccessToast('Dashboard actualizado correctamente');console.log('‚úÖ [REFRESH] Dashboard actualizado exitosamente');}, 1500);}startAutoRefresh() {if (this.refreshInterval) {clearInterval(this.refreshInterval);}this.refreshInterval = setInterval(async () => {await this.loadDashboardData();this.updateDashboardUI();this.displayPendingRegistrations();}, 5 * 60 * 1000); }viewStudent(studentId) {const student = this.dashboardData.students.find(s => s.id === studentId);if (!student) return;this.showInfoModal('Detalles del Estudiante', `<div class="row"><div class="col-md-6"><h6>Informaci√≥n Personal</h6><p><strong>Matr√≠cula:</strong> ${student.id}</p><p><strong>Nombre:</strong> ${student.name}</p><p><strong>Semestre:</strong> ${student.semester}</p></div><div class="col-md-6"><h6>Rendimiento Acad√©mico</h6><p><strong>Promedio:</strong> ${student.average}</p><p><strong>Estado:</strong> ${student.status}</p><p><strong>Nivel de Riesgo:</strong> ${student.riskLevel}</p></div></div>`);}editStudent(studentId) {this.showSuccessToast(`Funci√≥n de edici√≥n para estudiante ${studentId} (En desarrollo)`);}contactStudent(studentId) {this.showSuccessToast(`Funci√≥n de contacto para estudiante ${studentId} (En desarrollo)`);}addStudent() {this.showSuccessToast('Funci√≥n de agregar estudiante (En desarrollo)');}exportStudents() {this.showLoadingToast('Generando exportaci√≥n...');setTimeout(() => {const csvData = 'Matr√≠cula,Nombre,Semestre,Promedio,Estado\n' +this.dashboardData.students.map(s =>`${s.id},${s.name},${s.semester},${s.average},${s.status}`).join('\n');const blob = new Blob([csvData], { type: 'text/csv' });const url = window.URL.createObjectURL(blob);const a = document.createElement('a');a.href = url;a.download = `estudiantes_${new Date().toISOString().split('T')[0]}.csv`;document.body.appendChild(a);a.click();window.URL.revokeObjectURL(url);document.body.removeChild(a);this.showSuccessToast('Exportaci√≥n completada');}, 2000);}viewTeacher(teacherId) {const teacher = this.dashboardData.teachers.find(t => t.id === teacherId);if (!teacher) return;this.showInfoModal('Detalles del Docente', `<div class="row"><div class="col-md-6"><h6>Informaci√≥n Personal</h6><p><strong>ID:</strong> ${teacher.id}</p><p><strong>Nombre:</strong> ${teacher.name}</p><p><strong>Especialidad:</strong> ${teacher.specialty}</p></div><div class="col-md-6"><h6>Carga Acad√©mica</h6><p><strong>Materias:</strong></p><ul>${teacher.subjects.map(subject => `<li>${subject}</li>`).join('')}</ul><p><strong>Horas Semanales:</strong> ${teacher.workload}</p></div></div>`);}editTeacher(teacherId) {this.showSuccessToast(`Funci√≥n de edici√≥n para docente ${teacherId} (En desarrollo)`);}assignSubjects(teacherId) {this.showSuccessToast(`Funci√≥n de asignaci√≥n de materias para ${teacherId} (En desarrollo)`);}addTeacher() {this.showSuccessToast('Funci√≥n de agregar docente (En desarrollo)');}generateReport(type) {this.showLoadingToast(`Generando reporte ${type}...`);setTimeout(() => {const reportName = this.getReportName(type);const blob = new Blob([`Reporte ${reportName} generado el ${new Date().toLocaleDateString()}`],{ type: 'application/pdf' });const url = window.URL.createObjectURL(blob);const a = document.createElement('a');a.href = url;a.download = `reporte_${type}_${new Date().toISOString().split('T')[0]}.pdf`;document.body.appendChild(a);a.click();window.URL.revokeObjectURL(url);document.body.removeChild(a);this.showSuccessToast(`Reporte ${reportName} generado correctamente`);}, 2500);}getReportName(type) {const names = {'academic': 'de Calificaciones','attendance': 'de Asistencia','performance': 'de Rendimiento','payments': 'de Pagos','income': 'de Ingresos','pending': 'de Pagos Vencidos'};return names[type] || 'General';}showInfoModal(title, content) {const modalHTML = `<div class="modal fade" id="dynamicModal" tabindex="-1"><div class="modal-dialog modal-lg"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">${title}</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div><div class="modal-body">${content}</div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button></div></div></div></div>`;const existingModal = document.getElementById('dynamicModal');if (existingModal) {existingModal.remove();}document.body.insertAdjacentHTML('beforeend', modalHTML);const modal = new bootstrap.Modal(document.getElementById('dynamicModal'));modal.show();}showSuccessToast(message) {this.showToast(message, 'success');}showErrorToast(message) {this.showToast(message, 'danger');}showLoadingToast(message) {this.showToast(message, 'info');}showToast(message, type = 'info') {let toastContainer = document.querySelector('.toast-container');if (!toastContainer) {toastContainer = document.createElement('div');toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';toastContainer.style.zIndex = '9999';document.body.appendChild(toastContainer);}const toastElement = document.createElement('div');toastElement.className = `toast align-items-center text-bg-${type} border-0`;toastElement.innerHTML = `<div class="d-flex"><div class="toast-body">${message}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button></div>`;toastContainer.appendChild(toastElement);const toast = new bootstrap.Toast(toastElement, {autohide: true,delay: 5000});toast.show();toastElement.addEventListener('hidden.bs.toast', () => {toastElement.remove();});}changePassword() {const currentPassword = document.getElementById('currentPassword').value;const newPassword = document.getElementById('newPassword').value;const confirmPassword = document.getElementById('confirmPassword').value;const errorDiv = document.getElementById('passwordError');const successDiv = document.getElementById('passwordSuccess');errorDiv.classList.add('d-none');successDiv.classList.add('d-none');if (currentPassword !== this.adminCredentials.password) {this.showPasswordError('La contrase√±a actual no es correcta');return;}if (newPassword.length < 6) {this.showPasswordError('La nueva contrase√±a debe tener al menos 6 caracteres');return;}if (newPassword !== confirmPassword) {this.showPasswordError('Las contrase√±as no coinciden');return;}if (newPassword === currentPassword) {this.showPasswordError('La nueva contrase√±a debe ser diferente a la actual');return;}this.adminCredentials.password = newPassword;localStorage.setItem('adminCredentials', JSON.stringify(this.adminCredentials));this.showPasswordSuccess('Contrase√±a cambiada exitosamente');setTimeout(() => {document.getElementById('changePasswordForm').reset();const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));modal.hide();}, 2000);this.showToast('Contrase√±a actualizada correctamente', 'success');}showPasswordError(message) {const errorDiv = document.getElementById('passwordError');errorDiv.textContent = message;errorDiv.classList.remove('d-none');}showPasswordSuccess(message) {const successDiv = document.getElementById('passwordSuccess');successDiv.textContent = message;successDiv.classList.remove('d-none');}configureRealData() {const modal = document.getElementById('configureDataModal');if (!modal) {console.error('Modal de configuraci√≥n no encontrado');return;}document.getElementById('configTotalStudents').value = this.realDataConfig.totalStudents;document.getElementById('configTotalTeachers').value = this.realDataConfig.totalTeachers;document.getElementById('configTotalSubjects').value = this.realDataConfig.totalSubjects;document.getElementById('configGeneralAverage').value = this.realDataConfig.generalAverage;const configModal = new bootstrap.Modal(modal);configModal.show();}saveRealDataConfig() {console.log('üîß [CONFIG] saveRealDataConfig() iniciado - NUEVA VERSI√ìN 2025-09-15 16:30:00');const totalStudents = document.getElementById('configTotalStudents').value;const totalTeachers = document.getElementById('configTotalTeachers').value;const totalSubjects = document.getElementById('configTotalSubjects').value;const generalAverage = document.getElementById('configGeneralAverage').value;console.log('üìä [CONFIG] Valores del formulario:', {totalStudents, totalTeachers, totalSubjects, generalAverage});const errorDiv = document.getElementById('configError');const successDiv = document.getElementById('configSuccess');if (errorDiv) errorDiv.classList.add('d-none');if (successDiv) successDiv.classList.add('d-none');if (!totalStudents || isNaN(totalStudents) || parseInt(totalStudents) < 0) {this.showConfigError('El n√∫mero de estudiantes debe ser un n√∫mero v√°lido mayor o igual a 0');return;}if (!totalTeachers || isNaN(totalTeachers) || parseInt(totalTeachers) < 0) {this.showConfigError('El n√∫mero de docentes debe ser un n√∫mero v√°lido mayor o igual a 0');return;}if (!totalSubjects || isNaN(totalSubjects) || parseInt(totalSubjects) < 0) {this.showConfigError('El n√∫mero de materias debe ser un n√∫mero v√°lido mayor o igual a 0');return;}if (!generalAverage || isNaN(generalAverage) || parseFloat(generalAverage) < 0 || parseFloat(generalAverage) > 10) {this.showConfigError('El promedio general debe ser un n√∫mero entre 0 y 10');return;}console.log('‚úÖ [CONFIG] Validaciones pasadas');this.realDataConfig.totalStudents = parseInt(totalStudents);this.realDataConfig.totalTeachers = parseInt(totalTeachers);this.realDataConfig.totalSubjects = parseInt(totalSubjects);this.realDataConfig.generalAverage = parseFloat(generalAverage);console.log('üíæ [CONFIG] Datos guardados en realDataConfig:', this.realDataConfig);console.log('üíæ [CONFIG] Guardando en localStorage...');try {localStorage.setItem('realData_totalStudents', totalStudents);console.log('‚úÖ [CONFIG] totalStudents guardado:', localStorage.getItem('realData_totalStudents'));localStorage.setItem('realData_totalTeachers', totalTeachers);console.log('‚úÖ [CONFIG] totalTeachers guardado:', localStorage.getItem('realData_totalTeachers'));localStorage.setItem('realData_totalSubjects', totalSubjects);console.log('‚úÖ [CONFIG] totalSubjects guardado:', localStorage.getItem('realData_totalSubjects'));localStorage.setItem('realData_generalAverage', generalAverage);console.log('‚úÖ [CONFIG] generalAverage guardado:', localStorage.getItem('realData_generalAverage'));localStorage.setItem('realData_customConfigured', 'true');localStorage.setItem('realData_lastConfigured', Date.now().toString());console.log('üéØ [CONFIG] Flag customConfigured:', localStorage.getItem('realData_customConfigured'));} catch (error) {console.error('‚ùå [CONFIG] Error guardando en localStorage:', error);this.showConfigError('Error guardando configuraci√≥n en el navegador');return;}console.log('üîç [CONFIG] Verificando localStorage despu√©s de guardar:', {totalStudents: localStorage.getItem('realData_totalStudents'),totalTeachers: localStorage.getItem('realData_totalTeachers'),totalSubjects: localStorage.getItem('realData_totalSubjects'),generalAverage: localStorage.getItem('realData_generalAverage')});if (!this.dashboardData) {this.dashboardData = {};}this.dashboardData.statistics = {totalStudents: parseInt(totalStudents),totalTeachers: parseInt(totalTeachers),totalSubjects: parseInt(totalSubjects),generalAverage: parseFloat(generalAverage)};console.log('üìä [CONFIG] DashboardData actualizado:', this.dashboardData.statistics);this.updateDashboardUI();this.showConfigSuccess('Configuraci√≥n guardada exitosamente');setTimeout(() => {const modal = bootstrap.Modal.getInstance(document.getElementById('configureDataModal'));if (modal) {modal.hide();}this.showToast('Datos estad√≠sticos actualizados correctamente', 'success');console.log('üéâ [CONFIG] saveRealDataConfig() completado exitosamente');}, 1000);}showConfigError(message) {const errorDiv = document.getElementById('configError');errorDiv.textContent = message;errorDiv.classList.remove('d-none');}showConfigSuccess(message) {const successDiv = document.getElementById('configSuccess');successDiv.textContent = message;successDiv.classList.remove('d-none');}}let adminDashboard;function showLoginModal() {console.log('üîê [MODAL] Mostrando modal de login...');const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));loginModal.show();}function showInfoModal() {console.log('üîç [INFO] showInfoModal() iniciado - NUEVA VERSI√ìN');const infoModal = new bootstrap.Modal(document.getElementById('infoModal'));infoModal.show();updateSystemInfo();}function updateSystemInfo() {console.log('‚ö° [INFO] updateSystemInfo() ULTRARR√ÅPIDO iniciado - NUEVA VERSI√ìN');const startTime = performance.now();const modalBody = document.querySelector('#infoModal .modal-body');if (!modalBody) {console.log('‚ùå [INFO] Modal body no encontrado');return;}const now = new Date();const customConfig = localStorage.getItem('realData_customConfigured') === 'true';let estudiantes = 1247, docentes = 68, materias = 42, promedio = 8.4;if (customConfig) {estudiantes = parseInt(localStorage.getItem('realData_totalStudents')) || 1247;docentes = parseInt(localStorage.getItem('realData_totalTeachers')) || 68;materias = parseInt(localStorage.getItem('realData_totalSubjects')) || 42;promedio = parseFloat(localStorage.getItem('realData_generalAverage')) || 8.4;}console.log('üìä [INFO] Datos estad√≠sticos:', {estudiantes, docentes, materias, promedio});modalBody.innerHTML = `<div class="row"><div class="col-md-6"><h6><i class="fas fa-school me-2 text-primary"></i>Informaci√≥n del Sistema</h6><ul class="list-unstyled mb-4"><li><strong>Instituci√≥n:</strong> BGE H√©roes de la Patria</li><li><strong>Ubicaci√≥n:</strong> localhost</li><li><strong>Puerto:</strong> 3000</li><li><strong>Estado:</strong> <span class="badge bg-success">Operativo</span></li><li><strong>Versi√≥n:</strong> 2.2.0 - Dashboard Manager 2025</li><li><strong>Actividad:</strong> Sistema iniciado correctamente</li></ul><h6><i class="fas fa-chart-bar me-2 text-info"></i>Estad√≠sticas Institucionales</h6><ul class="list-unstyled"><li><strong>Estudiantes:</strong> <span class="badge bg-primary">${estudiantes.toLocaleString()}</span></li><li><strong>Docentes:</strong> <span class="badge bg-success">${docentes}</span></li><li><strong>Materias:</strong> <span class="badge bg-warning">${materias}</span></li><li><strong>Promedio General:</strong> <span class="badge bg-info">${promedio}</span></li><li><strong>Navegador:</strong> Chrome</li></ul></div><div class="col-md-6"><h6><i class="fas fa-clock me-2 text-success"></i>Informaci√≥n Temporal</h6><ul class="list-unstyled mb-4"><li><strong>Fecha actual:</strong> ${now.toLocaleDateString('es-MX')}</li><li><strong>Hora actual:</strong> ${now.toLocaleTimeString('es-MX')}</li><li><strong>Sistema operativo:</strong> Windows</li><li><strong>Navegador:</strong> Chrome</li></ul><h6><i class="fas fa-cogs me-2 text-warning"></i>M√≥dulos Activos</h6><ul class="list-unstyled mb-4"><li><i class="fas fa-check text-success me-2"></i>Dashboard Manager 2025</li><li><i class="fas fa-check text-success me-2"></i>Gesti√≥n de Contenido</li><li><i class="fas fa-check text-success me-2"></i>Sistema de B√∫squeda</li><li><i class="fas fa-check text-success me-2"></i>Configuraci√≥n de Datos</li><li><i class="fas fa-check text-success me-2"></i>Seguridad y Autenticaci√≥n</li></ul><h6><i class="fas fa-shield-alt me-2 text-info"></i>Estado del Sistema</h6><ul class="list-unstyled"><li><i class="fas fa-server text-success me-2"></i>Servidor: Operativo</li><li><i class="fas fa-database text-success me-2"></i>Base de datos: Conectada</li><li><i class="fas fa-shield-alt text-success me-2"></i>Seguridad: Activa</li><li><i class="fas fa-sync text-success me-2"></i>Sincronizaci√≥n: Actualizada</li></ul></div></div><div class="row mt-4"><div class="col-12"><div class="alert alert-info"><h6><i class="fas fa-info-circle me-2"></i>Informaci√≥n Adicional</h6><p class="mb-0">Este dashboard administrativo permite la gesti√≥n completa del Bachillerato General Estatal "H√©roes de la Patria".Todas las funciones est√°n dise√±adas para facilitar la administraci√≥n acad√©mica y proporcionar informaci√≥n en tiempo real.</p></div></div></div>`;const endTime = performance.now();console.log(`‚ö° [INFO] updateSystemInfo() completado en ${(endTime - startTime).toFixed(2)}ms`);}function loginAdmin() {console.log('üîë [GLOBAL] Funci√≥n loginAdmin() llamada');if (adminDashboard && typeof adminDashboard.loginAdmin === 'function') {console.log('‚úÖ [GLOBAL] Llamando adminDashboard.loginAdmin()');adminDashboard.loginAdmin();} else {console.error('‚ùå [GLOBAL] adminDashboard no est√° inicializado o no tiene m√©todo loginAdmin');alert('Error: Sistema no inicializado correctamente. Recarga la p√°gina.');}}function logoutAdmin() {adminDashboard.logoutAdmin();}function refreshDashboard() {adminDashboard.refreshDashboard();}function viewStudent(studentId) {adminDashboard.viewStudent(studentId);}function editStudent(studentId) {adminDashboard.editStudent(studentId);}function contactStudent(studentId) {adminDashboard.contactStudent(studentId);}function addStudent() {adminDashboard.addStudent();}function exportStudents() {adminDashboard.exportStudents();}function viewTeacher(teacherId) {adminDashboard.viewTeacher(teacherId);}function editTeacher(teacherId) {adminDashboard.editTeacher(teacherId);}function assignSubjects(teacherId) {adminDashboard.assignSubjects(teacherId);}function addTeacher() {adminDashboard.addTeacher();}function generateReport(type) {adminDashboard.generateReport(type);}function togglePasswordVisibility(fieldId) {const field = document.getElementById(fieldId);const icon = document.getElementById(fieldId + 'Icon');if (field.type === 'password') {field.type = 'text';icon.className = 'fas fa-eye-slash';} else {field.type = 'password';icon.className = 'fas fa-eye';}}function showChangePasswordModal() {const modal = new bootstrap.Modal(document.getElementById('changePasswordModal'));modal.show();}function showConfigureDataModal() {if (adminDashboard && typeof adminDashboard.configureRealData === 'function') {adminDashboard.configureRealData();} else {console.error('AdminDashboard no est√° inicializado o no tiene m√©todo configureRealData');alert('Error: Sistema no inicializado correctamente. Recarga la p√°gina.');}}function saveRealDataConfig() {console.log('üîß [GLOBAL] Funci√≥n global saveRealDataConfig() llamada - NUEVA VERSI√ìN 2025-09-15 16:30:00');if (adminDashboard && typeof adminDashboard.saveRealDataConfig === 'function') {console.log('‚úÖ [GLOBAL] Llamando m√©todo de adminDashboard');adminDashboard.saveRealDataConfig();updateRefreshButtonState();} else {console.error('‚ùå [GLOBAL] AdminDashboard no disponible o m√©todo no existe');alert('Error: Sistema no inicializado correctamente. Recarga la p√°gina.');}}function updateRefreshButtonState() {const hasCustomConfig = localStorage.getItem('realData_customConfigured') === 'true';const refreshButtons = document.querySelectorAll('[onclick="refreshDashboard()"]');refreshButtons.forEach(button => {if (hasCustomConfig) {button.innerHTML = '<i class="fas fa-exclamation-triangle me-1"></i>‚ö†Ô∏è Configuraci√≥n Personalizada';button.className = 'btn btn-warning btn-sm';button.title = 'Datos personalizados configurados - Usar con precauci√≥n';} else {button.innerHTML = '<i class="fas fa-sync me-1"></i>Actualizar';button.className = 'btn btn-outline-light btn-sm';button.title = 'Actualizar dashboard';}});}window.legacyContentManager = {items: JSON.parse(localStorage.getItem('siteContent') || '[]'),save: function() {localStorage.setItem('siteContent', JSON.stringify(this.items));this.updateDisplay();},create: function(data) {const newItem = {id: Date.now(),...data,createdAt: new Date().toISOString(),createdBy: adminDashboard?.currentUser?.name || 'Administrador'};this.items.unshift(newItem);this.save();return newItem;},delete: function(id) {this.items = this.items.filter(item => item.id !== id);this.save();},edit: function(id, newData) {const index = this.items.findIndex(item => item.id === id);if (index !== -1) {this.items[index] = { ...this.items[index], ...newData, updatedAt: new Date().toISOString() };this.save();}},updateDisplay: function() {const container = document.getElementById('contentList');const countElement = document.getElementById('contentCount');const filter = document.getElementById('contentFilter')?.value || 'all';if (!container) return;let filteredItems = this.items;if (filter !== 'all') {filteredItems = this.items.filter(item => item.type === filter);}if (countElement) {countElement.textContent = filteredItems.length;}if (filteredItems.length === 0) {container.innerHTML = `<div class="text-center text-muted py-4"><i class="fas fa-inbox fa-3x mb-3"></i><p>No hay contenido de este tipo</p><small>Usa el formulario para crear contenido</small></div>`;return;}const html = filteredItems.map(item => this.renderItem(item)).join('');container.innerHTML = html;},renderItem: function(item) {const typeIcons = {aviso: 'üì¢',evento: 'üìÖ',noticia: 'üì∞',comunicado: 'üìã'};const priorityColors = {normal: 'secondary',importante: 'warning',urgente: 'danger'};const formatDate = (dateStr) => {if (!dateStr) return '';return new Date(dateStr).toLocaleDateString('es-MX');};return `<div class="card mb-3" data-content-id="${item.id}"><div class="card-body"><div class="d-flex justify-content-between align-items-start"><div class="flex-grow-1"><h6 class="card-title mb-1">${typeIcons[item.type]} ${item.title}<span class="badge bg-${priorityColors[item.priority]} ms-2">${item.priority}</span></h6><p class="card-text text-muted small mb-2">${item.description}</p>${item.date ? `<small class="text-info"><i class="fas fa-calendar me-1"></i>Fecha: ${formatDate(item.date)}</small><br>` : ''}<small class="text-muted"><i class="fas fa-user me-1"></i>${item.createdBy} ‚Ä¢<i class="fas fa-clock me-1"></i>${formatDate(item.createdAt)}</small></div><div class="btn-group btn-group-sm"><button class="btn btn-outline-primary" onclick="editContent(${item.id})" title="Editar"><i class="fas fa-edit"></i></button><button class="btn btn-outline-danger" onclick="deleteContent(${item.id})" title="Eliminar"><i class="fas fa-trash"></i></button></div></div></div></div>`;}};function createContent() {const form = document.getElementById('contentForm');const formData = new FormData(form);const data = {type: document.getElementById('contentType').value,title: document.getElementById('contentTitle').value,description: document.getElementById('contentDescription').value,date: document.getElementById('contentDate').value,priority: document.getElementById('contentPriority').value};if (!data.type || !data.title || !data.description) {alert('Por favor completa todos los campos requeridos');return;}window.legacyContentManager.create(data);clearContentForm();if (adminDashboard && typeof adminDashboard.showToast === 'function') {adminDashboard.showToast('Contenido creado exitosamente', 'success');}}function clearContentForm() {document.getElementById('contentForm').reset();}function deleteContent(id) {if (confirm('¬øEst√°s seguro de que deseas eliminar este contenido?')) {window.legacyContentManager.delete(id);if (adminDashboard && typeof adminDashboard.showToast === 'function') {adminDashboard.showToast('Contenido eliminado correctamente', 'info');}}}function editContent(id) {const item = window.legacyContentManager.items.find(item => item.id === id);if (!item) return;document.getElementById('contentType').value = item.type;document.getElementById('contentTitle').value = item.title;document.getElementById('contentDescription').value = item.description;document.getElementById('contentDate').value = item.date || '';document.getElementById('contentPriority').value = item.priority;const submitBtn = document.querySelector('#contentForm button[onclick="createContent()"]');submitBtn.innerHTML = '<i class="fas fa-save me-1"></i>Actualizar Contenido';submitBtn.onclick = () => updateContent(id);document.getElementById('contentForm').scrollIntoView({ behavior: 'smooth' });}function updateContent(id) {const data = {type: document.getElementById('contentType').value,title: document.getElementById('contentTitle').value,description: document.getElementById('contentDescription').value,date: document.getElementById('contentDate').value,priority: document.getElementById('contentPriority').value};if (!data.type || !data.title || !data.description) {alert('Por favor completa todos los campos requeridos');return;}window.legacyContentManager.edit(id, data);clearContentForm();const submitBtn = document.querySelector('#contentForm button[onclick^="updateContent"]');submitBtn.innerHTML = '<i class="fas fa-plus me-1"></i>Crear Contenido';submitBtn.onclick = createContent;if (adminDashboard && typeof adminDashboard.showToast === 'function') {adminDashboard.showToast('Contenido actualizado exitosamente', 'success');}}function filterContent() {window.legacyContentManager.updateDisplay();}document.addEventListener('DOMContentLoaded', function() {console.log('üìÑ [DOM] DOMContentLoaded - NUEVA VERSI√ìN 2025-09-15 16:30:00');if (document.getElementById('contentList')) {window.legacyContentManager.updateDisplay();}});document.addEventListener('DOMContentLoaded', function() {console.log('üöÄ [INIT] Inicializando dashboard - NUEVA VERSI√ìN 2025-09-15 16:30:00');if (typeof Chart === 'undefined') {console.error('Chart.js no est√° disponible. Los gr√°ficos no funcionar√°n.');const script = document.createElement('script');script.src = 'https:script.onload = function() {console.log('Chart.js cargado din√°micamente');adminDashboard = new AdminDashboard();};script.onerror = function() {console.error('No se pudo cargar Chart.js. Dashboard funcionar√° sin gr√°ficos.');adminDashboard = new AdminDashboard();};document.head.appendChild(script);} else {console.log('Chart.js disponible, inicializando dashboard');adminDashboard = new AdminDashboard();}});const adminStyle = document.createElement('style');adminStyle.textContent = `.feature-card {transition: all 0.3s ease;cursor: pointer;}.feature-card:hover {transform: translateY(-5px);box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;}.stat-card {transition: all 0.3s ease;}.stat-card:hover {transform: translateY(-3px);box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;}#academicChart {height: 300px !important;}.table th {font-weight: 600;font-size: 0.9rem;}.table td {vertical-align: middle;font-size: 0.9rem;}.btn-group-sm .btn {padding: 0.25rem 0.4rem;font-size: 0.8rem;}.nav-pills .nav-link {font-size: 0.9rem;padding: 0.6rem 1rem;}.dark-mode .card {background-color: #2d3748;border-color: #4a5568;}.dark-mode .table {color: #f7fafc;}.dark-mode .table-primary th,.dark-mode .table-success th,.dark-mode .table-info th {background-color: #4a5568;border-color: #718096;color: #f7fafc;}.dark-mode .modal-content {background-color: #2d3748;color: #f7fafc;}.dark-mode .form-control,.dark-mode .form-select {background-color: #4a5568;border-color: #718096;color: #f7fafc;}.dark-mode .nav-pills .nav-link {color: #a0aec0;}.dark-mode .nav-pills .nav-link.active {background-color: #3182ce;}`;document.head.appendChild(adminStyle);console.log('‚úÖ [COMPLETE] dashboard-manager-2025.js cargado completamente - VERSI√ìN 2025-09-15 16:30:00');
class CMSManager {constructor() {console.log('üéõÔ∏è [CMS] Inicializando sistema de gesti√≥n de contenido...');this.apiBase = 'data/';this.init();}init() {this.initializeEventListeners();console.log('‚úÖ [CMS] Sistema CMS iniciado correctamente');}initializeEventListeners() {const noticiaForm = document.getElementById('noticiaForm');if (noticiaForm) {noticiaForm.addEventListener('submit', (e) => this.handleNoticiaSubmit(e));}const eventoForm = document.getElementById('eventoForm');if (eventoForm) {eventoForm.addEventListener('submit', (e) => this.handleEventoSubmit(e));}const avisoForm = document.getElementById('avisoForm');if (avisoForm) {avisoForm.addEventListener('submit', (e) => this.handleAvisoSubmit(e));}const comunicadoForm = document.getElementById('comunicadoForm');if (comunicadoForm) {comunicadoForm.addEventListener('submit', (e) => this.handleComunicadoSubmit(e));}const noticiasModal = document.getElementById('noticiasModal');if (noticiasModal) {noticiasModal.addEventListener('shown.bs.modal', () => this.loadNoticiasExistentes());}const eventosModal = document.getElementById('eventosModal');if (eventosModal) {eventosModal.addEventListener('shown.bs.modal', () => this.loadEventosExistentes());}const avisosModal = document.getElementById('avisosModal');if (avisosModal) {avisosModal.addEventListener('shown.bs.modal', () => this.loadAvisosExistentes());}const comunicadosModal = document.getElementById('comunicadosModal');if (comunicadosModal) {comunicadosModal.addEventListener('shown.bs.modal', () => this.loadComunicadosExistentes());}}async loadData(endpoint) {try {const response = await fetch(`${this.apiBase}${endpoint}`);if (!response.ok) {throw new Error(`Error ${response.status}: ${response.statusText}`);}return await response.json();} catch (error) {console.error(`‚ùå [CMS] Error cargando ${endpoint}:`, error);return null;}}async saveData(endpoint, data) {try {const existingData = await this.loadData(endpoint) || {};const key = Object.keys(data)[0]; localStorage.setItem(`cms_${endpoint}`, JSON.stringify(data));console.log(`üíæ [CMS] Datos guardados en ${endpoint}`);return true;} catch (error) {console.error(`‚ùå [CMS] Error guardando ${endpoint}:`, error);return false;}}async handleNoticiaSubmit(e) {e.preventDefault();const noticiaData = {id: this.generateId('noticia'),titulo: document.getElementById('noticiaTitulo').value,resumen: document.getElementById('noticiaResumen').value,contenido: document.getElementById('noticiaContenido').value,autor: document.getElementById('noticiaAutor').value,fecha: document.getElementById('noticiaFecha').value,categoria: document.getElementById('noticiaCategoria').value,imagen: document.getElementById('noticiaImagen').value || 'images/default.jpg',tags: document.getElementById('noticiaTags').value.split(',').map(tag => tag.trim()).filter(tag => tag),destacado: document.getElementById('noticiaDestacado').checked,activo: document.getElementById('noticiaActivo').checked,fechaCreacion: new Date().toISOString()};try {const existingData = await this.loadData('noticias.json') || { noticias: [] };existingData.noticias.push(noticiaData);existingData.configuracion = {ultimaActualizacion: new Date().toISOString(),version: "1.0",totalElementos: existingData.noticias.length};await this.saveData('noticias.json', existingData);this.showNotification('Noticia guardada exitosamente', 'success');this.clearNoticiaForm();this.loadNoticiasExistentes();if (window.statsCounter) {window.statsCounter.refresh();}} catch (error) {console.error('Error guardando noticia:', error);this.showNotification('Error al guardar la noticia', 'error');}}async loadNoticiasExistentes() {const container = document.getElementById('noticiasContainer');if (!container) return;container.innerHTML = `<div class="text-center p-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div><p class="mt-2">Cargando noticias...</p></div>`;const data = await this.loadData('noticias.json');const storageData = localStorage.getItem('cms_noticias.json');let noticias = [];if (data && data.noticias) {noticias = [...data.noticias];}if (storageData) {const parsedStorage = JSON.parse(storageData);if (parsedStorage.noticias) {noticias = [...noticias, ...parsedStorage.noticias];}}if (noticias.length === 0) {container.innerHTML = `<div class="text-center p-4"><i class="fas fa-newspaper fa-3x text-muted mb-3"></i><p class="text-muted">No hay noticias creadas a√∫n</p></div>`;return;}let html = `<table class="table table-hover"><thead><tr><th>T√≠tulo</th><th>Categor√≠a</th><th>Fecha</th><th>Estado</th><th>Acciones</th></tr></thead><tbody>`;noticias.forEach(noticia => {html += `<tr><td><strong>${noticia.titulo}</strong>${noticia.destacado ? '<span class="badge bg-warning ms-2">Destacada</span>' : ''}</td><td><span class="badge bg-secondary">${noticia.categoria}</span></td><td>${this.formatDate(noticia.fecha)}</td><td><span class="badge ${noticia.activo ? 'bg-success' : 'bg-danger'}">${noticia.activo ? 'Activa' : 'Inactiva'}</span></td><td><div class="btn-group" role="group"><button class="btn btn-sm btn-outline-primary" onclick="editNoticia('${noticia.id}')"><i class="fas fa-edit"></i></button><button class="btn btn-sm btn-outline-danger" onclick="deleteNoticia('${noticia.id}')"><i class="fas fa-trash"></i></button></div></td></tr>`;});html += `</tbody></table>`;container.innerHTML = html;}async handleEventoSubmit(e) {e.preventDefault();const eventoData = {id: this.generateId('evento'),titulo: document.getElementById('eventoTitulo').value,descripcion: document.getElementById('eventoDescripcion').value,fecha: document.getElementById('eventoFecha').value,hora: document.getElementById('eventoHora').value,lugar: document.getElementById('eventoLugar').value,organizador: document.getElementById('eventoOrganizador').value,categoria: document.getElementById('eventoCategoria').value,cupoMaximo: document.getElementById('eventoCupo').value ? parseInt(document.getElementById('eventoCupo').value) : null,contacto: document.getElementById('eventoContacto').value,imagen: document.getElementById('eventoImagen').value || 'images/default.jpg',inscripcionRequerida: document.getElementById('eventoInscripcion').checked,destacado: document.getElementById('eventoDestacado').checked,activo: document.getElementById('eventoActivo').checked,fechaCreacion: new Date().toISOString(),requisitos: []};try {const existingData = await this.loadData('eventos.json') || { eventos: [] };existingData.eventos.push(eventoData);existingData.configuracion = {ultimaActualizacion: new Date().toISOString(),version: "1.0",totalElementos: existingData.eventos.length};await this.saveData('eventos.json', existingData);this.showNotification('Evento guardado exitosamente', 'success');this.clearEventoForm();this.loadEventosExistentes();} catch (error) {console.error('Error guardando evento:', error);this.showNotification('Error al guardar el evento', 'error');}}async loadEventosExistentes() {const container = document.getElementById('eventosContainer');if (!container) return;container.innerHTML = `<div class="text-center p-4"><div class="spinner-border text-success" role="status"><span class="visually-hidden">Cargando...</span></div><p class="mt-2">Cargando eventos...</p></div>`;const data = await this.loadData('eventos.json');const storageData = localStorage.getItem('cms_eventos.json');let eventos = [];if (data && data.eventos) {eventos = [...data.eventos];}if (storageData) {const parsedStorage = JSON.parse(storageData);if (parsedStorage.eventos) {eventos = [...eventos, ...parsedStorage.eventos];}}if (eventos.length === 0) {container.innerHTML = `<div class="text-center p-4"><i class="fas fa-calendar-alt fa-3x text-muted mb-3"></i><p class="text-muted">No hay eventos creados a√∫n</p></div>`;return;}let html = `<table class="table table-hover"><thead><tr><th>Evento</th><th>Fecha/Hora</th><th>Lugar</th><th>Estado</th><th>Acciones</th></tr></thead><tbody>`;eventos.forEach(evento => {html += `<tr><td><strong>${evento.titulo}</strong><br><small class="text-muted">${evento.categoria}</small>${evento.destacado ? '<span class="badge bg-warning ms-2">Destacado</span>' : ''}</td><td>${this.formatDate(evento.fecha)}<br><small class="text-muted">${evento.hora}</small></td><td>${evento.lugar}</td><td><span class="badge ${evento.activo ? 'bg-success' : 'bg-danger'}">${evento.activo ? 'Activo' : 'Inactivo'}</span></td><td><div class="btn-group" role="group"><button class="btn btn-sm btn-outline-success" onclick="editEvento('${evento.id}')"><i class="fas fa-edit"></i></button><button class="btn btn-sm btn-outline-danger" onclick="deleteEvento('${evento.id}')"><i class="fas fa-trash"></i></button></div></td></tr>`;});html += `</tbody></table>`;container.innerHTML = html;}async handleAvisoSubmit(e) {e.preventDefault();const avisoData = {id: this.generateId('aviso'),titulo: document.getElementById('avisoTitulo').value,contenido: document.getElementById('avisoContenido').value,tipo: document.getElementById('avisoTipo').value,prioridad: document.getElementById('avisoPrioridad').value,fechaInicio: document.getElementById('avisoFechaInicio').value,fechaFin: document.getElementById('avisoFechaFin').value,dirigidoA: document.getElementById('avisoDirigidoA').value,contacto: document.getElementById('avisoContacto').value,imagen: document.getElementById('avisoImagen').value || 'images/default.jpg',activo: document.getElementById('avisoActivo').checked,fechaCreacion: new Date().toISOString(),tags: [document.getElementById('avisoTipo').value, document.getElementById('avisoPrioridad').value]};try {const existingData = await this.loadData('avisos.json') || { avisos: [] };existingData.avisos.push(avisoData);existingData.configuracion = {ultimaActualizacion: new Date().toISOString(),version: "1.0",totalElementos: existingData.avisos.length};await this.saveData('avisos.json', existingData);this.showNotification('Aviso guardado exitosamente', 'success');this.clearAvisoForm();this.loadAvisosExistentes();} catch (error) {console.error('Error guardando aviso:', error);this.showNotification('Error al guardar el aviso', 'error');}}async loadAvisosExistentes() {const container = document.getElementById('avisosContainer');if (!container) return;container.innerHTML = `<div class="text-center p-4"><div class="spinner-border text-warning" role="status"><span class="visually-hidden">Cargando...</span></div><p class="mt-2">Cargando avisos...</p></div>`;const data = await this.loadData('avisos.json');const storageData = localStorage.getItem('cms_avisos.json');let avisos = [];if (data && data.avisos) {avisos = [...data.avisos];}if (storageData) {const parsedStorage = JSON.parse(storageData);if (parsedStorage.avisos) {avisos = [...avisos, ...parsedStorage.avisos];}}if (avisos.length === 0) {container.innerHTML = `<div class="text-center p-4"><i class="fas fa-exclamation-triangle fa-3x text-muted mb-3"></i><p class="text-muted">No hay avisos creados a√∫n</p></div>`;return;}let html = `<table class="table table-hover"><thead><tr><th>T√≠tulo</th><th>Tipo</th><th>Prioridad</th><th>Vigencia</th><th>Estado</th><th>Acciones</th></tr></thead><tbody>`;avisos.forEach(aviso => {const prioridadClass = aviso.prioridad === 'alta' ? 'danger' : aviso.prioridad === 'media' ? 'warning' : 'secondary';html += `<tr><td><strong>${aviso.titulo}</strong></td><td><span class="badge bg-info">${aviso.tipo}</span></td><td><span class="badge bg-${prioridadClass}">${aviso.prioridad}</span></td><td>${this.formatDate(aviso.fechaInicio)}${aviso.fechaFin ? ' - ' + this.formatDate(aviso.fechaFin) : ''}</td><td><span class="badge ${aviso.activo ? 'bg-success' : 'bg-danger'}">${aviso.activo ? 'Activo' : 'Inactivo'}</span></td><td><div class="btn-group" role="group"><button class="btn btn-sm btn-outline-warning" onclick="editAviso('${aviso.id}')"><i class="fas fa-edit"></i></button><button class="btn btn-sm btn-outline-danger" onclick="deleteAviso('${aviso.id}')"><i class="fas fa-trash"></i></button></div></td></tr>`;});html += `</tbody></table>`;container.innerHTML = html;}async handleComunicadoSubmit(e) {e.preventDefault();const destinatarios = [];document.querySelectorAll('input[id^="dest_"]:checked').forEach(checkbox => {destinatarios.push(checkbox.value);});const comunicadoData = {id: this.generateId('comunicado'),titulo: document.getElementById('comunicadoTitulo').value,contenido: document.getElementById('comunicadoContenido').value,emisor: document.getElementById('comunicadoEmisor').value,tipo: document.getElementById('comunicadoTipo').value,fechaEmision: document.getElementById('comunicadoFecha').value,vigencia: document.getElementById('comunicadoVigencia').value || 'permanente',prioridad: document.getElementById('comunicadoPrioridad').value,destinatarios: destinatarios,imagen: document.getElementById('comunicadoImagen').value || 'images/default.jpg',activo: document.getElementById('comunicadoActivo').checked,fechaCreacion: new Date().toISOString(),adjuntos: [],tags: [document.getElementById('comunicadoTipo').value, document.getElementById('comunicadoPrioridad').value]};try {const existingData = await this.loadData('comunicados.json') || { comunicados: [] };existingData.comunicados.push(comunicadoData);existingData.configuracion = {ultimaActualizacion: new Date().toISOString(),version: "1.0",totalElementos: existingData.comunicados.length};await this.saveData('comunicados.json', existingData);this.showNotification('Comunicado guardado exitosamente', 'success');this.clearComunicadoForm();this.loadComunicadosExistentes();} catch (error) {console.error('Error guardando comunicado:', error);this.showNotification('Error al guardar el comunicado', 'error');}}async loadComunicadosExistentes() {const container = document.getElementById('comunicadosContainer');if (!container) return;container.innerHTML = `<div class="text-center p-4"><div class="spinner-border text-info" role="status"><span class="visually-hidden">Cargando...</span></div><p class="mt-2">Cargando comunicados...</p></div>`;const data = await this.loadData('comunicados.json');const storageData = localStorage.getItem('cms_comunicados.json');let comunicados = [];if (data && data.comunicados) {comunicados = [...data.comunicados];}if (storageData) {const parsedStorage = JSON.parse(storageData);if (parsedStorage.comunicados) {comunicados = [...comunicados, ...parsedStorage.comunicados];}}if (comunicados.length === 0) {container.innerHTML = `<div class="text-center p-4"><i class="fas fa-file-alt fa-3x text-muted mb-3"></i><p class="text-muted">No hay comunicados creados a√∫n</p></div>`;return;}let html = `<table class="table table-hover"><thead><tr><th>T√≠tulo</th><th>Emisor</th><th>Tipo</th><th>Fecha</th><th>Estado</th><th>Acciones</th></tr></thead><tbody>`;comunicados.forEach(comunicado => {const prioridadClass = comunicado.prioridad === 'alta' ? 'danger' : comunicado.prioridad === 'media' ? 'warning' : 'secondary';html += `<tr><td><strong>${comunicado.titulo}</strong></td><td>${comunicado.emisor}</td><td><span class="badge bg-info">${comunicado.tipo}</span><span class="badge bg-${prioridadClass} ms-1">${comunicado.prioridad}</span></td><td>${this.formatDate(comunicado.fechaEmision)}</td><td><span class="badge ${comunicado.activo ? 'bg-success' : 'bg-danger'}">${comunicado.activo ? 'Activo' : 'Inactivo'}</span></td><td><div class="btn-group" role="group"><button class="btn btn-sm btn-outline-info" onclick="editComunicado('${comunicado.id}')"><i class="fas fa-edit"></i></button><button class="btn btn-sm btn-outline-danger" onclick="deleteComunicado('${comunicado.id}')"><i class="fas fa-trash"></i></button></div></td></tr>`;});html += `</tbody></table>`;container.innerHTML = html;}generateId(prefix) {const timestamp = Date.now();const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');return `${prefix}-${timestamp}-${random}`;}formatDate(dateString) {const date = new Date(dateString);return date.toLocaleDateString('es-ES', {day: 'numeric',month: 'short',year: 'numeric'});}showNotification(message, type = 'info') {const toastContainer = document.getElementById('toastContainer') || this.createToastContainer();const toastId = `toast-${Date.now()}`;const bgClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : 'bg-info';const toastHTML = `<div class="toast ${bgClass} text-white" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true"><div class="toast-body"><i class="fas ${type === 'success' ? 'fa-check' : type === 'error' ? 'fa-times' : 'fa-info'} me-2"></i>${message}</div></div>`;toastContainer.insertAdjacentHTML('beforeend', toastHTML);const toastElement = document.getElementById(toastId);const toast = new bootstrap.Toast(toastElement, { delay: 3000 });toast.show();setTimeout(() => {toastElement.remove();}, 4000);}createToastContainer() {const container = document.createElement('div');container.id = 'toastContainer';container.className = 'toast-container position-fixed top-0 end-0 p-3';container.style.zIndex = '9999';document.body.appendChild(container);return container;}clearNoticiaForm() {document.getElementById('noticiaForm').reset();document.getElementById('noticiaId').value = '';document.getElementById('noticiaActivo').checked = true;}clearEventoForm() {document.getElementById('eventoForm').reset();document.getElementById('eventoId').value = '';document.getElementById('eventoActivo').checked = true;}clearAvisoForm() {document.getElementById('avisoForm').reset();document.getElementById('avisoId').value = '';document.getElementById('avisoActivo').checked = true;}clearComunicadoForm() {document.getElementById('comunicadoForm').reset();document.getElementById('comunicadoId').value = '';document.getElementById('comunicadoActivo').checked = true;document.querySelectorAll('input[id^="dest_"]').forEach(checkbox => {checkbox.checked = false;});}}document.addEventListener('DOMContentLoaded', function() {window.cmsManager = new CMSManager();});function refreshNoticiasList() {if (window.cmsManager) {window.cmsManager.loadNoticiasExistentes();}}function refreshEventosList() {if (window.cmsManager) {window.cmsManager.loadEventosExistentes();}}function refreshAvisosList() {if (window.cmsManager) {window.cmsManager.loadAvisosExistentes();}}function refreshComunicadosList() {if (window.cmsManager) {window.cmsManager.loadComunicadosExistentes();}}function clearNoticiaForm() {if (window.cmsManager) {window.cmsManager.clearNoticiaForm();}}function clearEventoForm() {if (window.cmsManager) {window.cmsManager.clearEventoForm();}}function clearAvisoForm() {if (window.cmsManager) {window.cmsManager.clearAvisoForm();}}function clearComunicadoForm() {if (window.cmsManager) {window.cmsManager.clearComunicadoForm();}}function editNoticia(id) {console.log('üñäÔ∏è Editando noticia:', id);}function editEvento(id) {console.log('üñäÔ∏è Editando evento:', id);}function editAviso(id) {console.log('üñäÔ∏è Editando aviso:', id);}function editComunicado(id) {console.log('üñäÔ∏è Editando comunicado:', id);}function deleteNoticia(id) {if (confirm('¬øEst√°s seguro de que deseas eliminar esta noticia?')) {console.log('üóëÔ∏è Eliminando noticia:', id);}}function deleteEvento(id) {if (confirm('¬øEst√°s seguro de que deseas eliminar este evento?')) {console.log('üóëÔ∏è Eliminando evento:', id);}}function deleteAviso(id) {if (confirm('¬øEst√°s seguro de que deseas eliminar este aviso?')) {console.log('üóëÔ∏è Eliminando aviso:', id);}}function deleteComunicado(id) {if (confirm('¬øEst√°s seguro de que deseas eliminar este comunicado?')) {console.log('üóëÔ∏è Eliminando comunicado:', id);}}console.log('üìù [CMS] cms-manager.js cargado exitosamente');
class StatsCounter {constructor() {console.log('üìä [STATS] Inicializando contador de estad√≠sticas...');this.apiBase = 'data/';this.init();}async init() {try {setTimeout(async () => {await this.updateAllStats();console.log('‚úÖ [STATS] Estad√≠sticas actualizadas correctamente');}, 1000);} catch (error) {console.error('‚ùå [STATS] Error inicializando estad√≠sticas:', error);}}async fetchData(endpoint) {try {console.log(`üì• [STATS] Cargando datos de ${endpoint}...`);const response = await fetch(`${this.apiBase}${endpoint}`);if (!response.ok) {throw new Error(`Error ${response.status}: ${response.statusText}`);}const data = await response.json();console.log(`‚úÖ [STATS] ${endpoint} cargado:`, data);return data;} catch (error) {console.error(`‚ùå [STATS] Error cargando ${endpoint}:`, error);return null;}}async countNoticias() {let totalCount = 0;const data = await this.fetchData('noticias.json');if (data && data.noticias) {totalCount += data.noticias.filter(n => n.activo).length;}const cmsData = localStorage.getItem('cms_noticias.json');if (cmsData) {try {const parsedData = JSON.parse(cmsData);if (parsedData.noticias) {totalCount += parsedData.noticias.filter(n => n.activo).length;}} catch (e) {console.warn('‚ö†Ô∏è [STATS] Error parseando noticias del localStorage:', e);}}console.log(`üì∞ [STATS] Noticias activas totales: ${totalCount}`);return totalCount;}async countEventos() {let totalCount = 0;const data = await this.fetchData('eventos.json');if (data && data.eventos) {totalCount += data.eventos.filter(e => e.activo).length;}const cmsData = localStorage.getItem('cms_eventos.json');if (cmsData) {try {const parsedData = JSON.parse(cmsData);if (parsedData.eventos) {totalCount += parsedData.eventos.filter(e => e.activo).length;}} catch (e) {console.warn('‚ö†Ô∏è [STATS] Error parseando eventos del localStorage:', e);}}console.log(`üìÖ [STATS] Eventos activos totales: ${totalCount}`);return totalCount;}async countAvisos() {let totalCount = 0;const data = await this.fetchData('avisos.json');if (data && data.avisos) {const now = new Date();totalCount += data.avisos.filter(aviso => {if (!aviso.activo) return false;const fechaInicio = new Date(aviso.fechaInicio);const fechaFin = aviso.fechaFin ? new Date(aviso.fechaFin) : null;return fechaInicio <= now && (!fechaFin || fechaFin >= now);}).length;}const cmsData = localStorage.getItem('cms_avisos.json');if (cmsData) {try {const parsedData = JSON.parse(cmsData);if (parsedData.avisos) {const now = new Date();totalCount += parsedData.avisos.filter(aviso => {if (!aviso.activo) return false;const fechaInicio = new Date(aviso.fechaInicio);const fechaFin = aviso.fechaFin ? new Date(aviso.fechaFin) : null;return fechaInicio <= now && (!fechaFin || fechaFin >= now);}).length;}} catch (e) {console.warn('‚ö†Ô∏è [STATS] Error parseando avisos del localStorage:', e);}}console.log(`‚ö†Ô∏è [STATS] Avisos vigentes totales: ${totalCount}`);return totalCount;}async countComunicados() {let totalCount = 0;const data = await this.fetchData('comunicados.json');if (data && data.comunicados) {totalCount += data.comunicados.filter(c => c.activo).length;}const cmsData = localStorage.getItem('cms_comunicados.json');if (cmsData) {try {const parsedData = JSON.parse(cmsData);if (parsedData.comunicados) {totalCount += parsedData.comunicados.filter(c => c.activo).length;}} catch (e) {console.warn('‚ö†Ô∏è [STATS] Error parseando comunicados del localStorage:', e);}}console.log(`üìã [STATS] Comunicados activos totales: ${totalCount}`);return totalCount;}async updateAllStats() {console.log('üîÑ [STATS] Actualizando todas las estad√≠sticas...');const [noticiasCount, eventosCount, avisosCount, comunicadosCount] = await Promise.all([this.countNoticias(),this.countEventos(),this.countAvisos(),this.countComunicados()]);this.updateElement('stat-noticias', noticiasCount);this.updateElement('stat-eventos', eventosCount);this.updateElement('stat-avisos', avisosCount);this.updateElement('stat-comunicados', comunicadosCount);this.updateElement('modal-stat-noticias', noticiasCount);this.updateElement('modal-stat-eventos', eventosCount);this.updateElement('modal-stat-avisos', avisosCount);this.updateElement('modal-stat-comunicados', comunicadosCount);const totalContenido = noticiasCount + eventosCount + avisosCount + comunicadosCount;console.log(`üìä [STATS] Total de contenido activo: ${totalContenido}`);this.updateSystemInfo({noticias: noticiasCount,eventos: eventosCount,avisos: avisosCount,comunicados: comunicadosCount,total: totalContenido});return {noticias: noticiasCount,eventos: eventosCount,avisos: avisosCount,comunicados: comunicadosCount,total: totalContenido};}updateElement(elementId, value) {const element = document.getElementById(elementId);if (element) {this.animateNumber(element, value);console.log(`‚úÖ [STATS] Actualizado ${elementId}: ${value}`);} else {console.warn(`‚ö†Ô∏è [STATS] Elemento ${elementId} no encontrado`);}}animateNumber(element, targetValue) {const currentValue = parseInt(element.textContent) || 0;const increment = targetValue > currentValue ? 1 : -1;const duration = 500; const steps = Math.abs(targetValue - currentValue);const stepDuration = steps > 0 ? duration / steps : 0;let current = currentValue;const timer = setInterval(() => {current += increment;element.textContent = current;if (current === targetValue) {clearInterval(timer);}}, stepDuration);}updateSystemInfo(stats) {const lastUpdateElement = document.getElementById('last-update');if (lastUpdateElement) {const now = new Date();lastUpdateElement.textContent = now.toLocaleDateString('es-ES', {day: 'numeric',month: 'long',year: 'numeric',hour: '2-digit',minute: '2-digit'});}const currentAdminElement = document.getElementById('current-admin');if (currentAdminElement) {currentAdminElement.textContent = 'Sistema CMS BGE';}const sessionTimeElement = document.getElementById('session-time');if (sessionTimeElement) {const sessionStart = localStorage.getItem('dashboard_session_start') || Date.now();const sessionDuration = Date.now() - parseInt(sessionStart);const minutes = Math.floor(sessionDuration / (1000 * 60));sessionTimeElement.textContent = `${minutes} minutos`;}console.log('‚ÑπÔ∏è [STATS] Informaci√≥n del sistema actualizada');}async refresh() {console.log('üîÑ [STATS] Refrescando estad√≠sticas...');return await this.updateAllStats();}}document.addEventListener('DOMContentLoaded', function() {if (!localStorage.getItem('dashboard_session_start')) {localStorage.setItem('dashboard_session_start', Date.now());}window.statsCounter = new StatsCounter();});function refreshStats() {if (window.statsCounter) {window.statsCounter.refresh();}}console.log('üìä [STATS] stats-counter.js cargado exitosamente');
})();