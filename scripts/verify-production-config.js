/**
 * üîç SCRIPT DE VERIFICACI√ìN DE CONFIGURACI√ìN DE PRODUCCI√ìN
 * Sistema automatizado para verificar que el proyecto BGE Framework
 * est√© correctamente configurado para producci√≥n
 *
 * @version 1.0.0
 * @author BGE Verification Team
 * @date 2025-09-27
 */

const fs = require('fs');
const path = require('path');

class ProductionConfigVerifier {
    constructor() {
        this.projectRoot = path.resolve(__dirname, '..');
        this.publicPath = path.join(this.projectRoot, 'public');
        this.errors = [];
        this.warnings = [];
        this.passed = [];

        this.startTime = Date.now();
        console.log('üîç Iniciando verificaci√≥n de configuraci√≥n de producci√≥n...\n');
    }

    /**
     * Ejecutar todas las verificaciones
     */
    async runAllChecks() {
        await this.checkDevOverrideStatus();
        await this.checkAutoUpdateSystem();
        await this.checkSynchronization();
        await this.checkHtmlFiles();
        await this.checkEnvironmentVariables();
        await this.checkServiceWorkers();

        this.generateReport();
    }

    /**
     * Verificar estado de dev-override.js
     */
    async checkDevOverrideStatus() {
        console.log('üìã Verificando estado de dev-override.js...');

        // Archivos cr√≠ticos a verificar
        const criticalFiles = [
            'index.html',
            'admin-dashboard.html',
            'public/index.html',
            'public/admin-dashboard.html'
        ];

        for (const file of criticalFiles) {
            const filePath = path.join(this.projectRoot, file);
            if (fs.existsSync(filePath)) {
                const content = fs.readFileSync(filePath, 'utf8');

                // Verificar que dev-override est√© comentado
                if (content.includes('<script src="js/dev-override.js">') &&
                    !content.includes('<!-- <script src="js/dev-override.js">')) {
                    this.errors.push(`‚ùå ${file}: dev-override.js est√° ACTIVO (debe estar comentado para producci√≥n)`);
                } else if (content.includes('<!-- <script src="js/dev-override.js">')) {
                    this.passed.push(`‚úÖ ${file}: dev-override.js correctamente DESHABILITADO`);
                }

                // Verificar dev-credentials
                if (content.includes('<script src="js/dev-credentials.js">') &&
                    !content.includes('<!-- <script src="js/dev-credentials.js">')) {
                    this.errors.push(`‚ùå ${file}: dev-credentials.js est√° ACTIVO (debe estar comentado para producci√≥n)`);
                } else if (content.includes('<!-- <script src="js/dev-credentials.js">')) {
                    this.passed.push(`‚úÖ ${file}: dev-credentials.js correctamente DESHABILITADO`);
                }
            }
        }
    }

    /**
     * Verificar configuraci√≥n de auto-update-system
     */
    async checkAutoUpdateSystem() {
        console.log('üìã Verificando auto-update-system.js...');

        const autoUpdatePaths = [
            'js/auto-update-system.js',
            'public/js/auto-update-system.js'
        ];

        for (const file of autoUpdatePaths) {
            const filePath = path.join(this.projectRoot, file);
            if (fs.existsSync(filePath)) {
                const content = fs.readFileSync(filePath, 'utf8');

                // Verificar que est√© habilitado para producci√≥n
                if (content.includes('Sistema HABILITADO para producci√≥n')) {
                    this.passed.push(`‚úÖ ${file}: Auto-update habilitado para producci√≥n`);
                } else {
                    this.warnings.push(`‚ö†Ô∏è ${file}: Verificar configuraci√≥n de producci√≥n`);
                }

                // Verificar detecci√≥n de desarrollo
                if (content.includes('detectDevelopmentEnvironment')) {
                    this.passed.push(`‚úÖ ${file}: Detecci√≥n de entorno implementada`);
                }
            }
        }
    }

    /**
     * Verificar sincronizaci√≥n entre ra√≠z y public
     */
    async checkSynchronization() {
        console.log('üìã Verificando sincronizaci√≥n ra√≠z ‚Üî public...');

        const filesToSync = [
            'index.html',
            'admin-dashboard.html'
        ];

        for (const file of filesToSync) {
            const rootFile = path.join(this.projectRoot, file);
            const publicFile = path.join(this.projectRoot, 'public', file);

            if (fs.existsSync(rootFile) && fs.existsSync(publicFile)) {
                const rootContent = fs.readFileSync(rootFile, 'utf8');
                const publicContent = fs.readFileSync(publicFile, 'utf8');

                // Verificar scripts cr√≠ticos est√©n sincronizados
                const criticalScripts = ['dev-override', 'dev-credentials', 'auto-update-system'];

                for (const script of criticalScripts) {
                    const rootHasScript = rootContent.includes(`${script}.js`);
                    const publicHasScript = publicContent.includes(`${script}.js`);

                    if (rootHasScript === publicHasScript) {
                        this.passed.push(`‚úÖ ${file}: ${script} sincronizado entre ra√≠z y public`);
                    } else {
                        this.errors.push(`‚ùå ${file}: ${script} NO sincronizado (ra√≠z: ${rootHasScript}, public: ${publicHasScript})`);
                    }
                }
            }
        }
    }

    /**
     * Verificar otros archivos HTML
     */
    async checkHtmlFiles() {
        console.log('üìã Verificando otros archivos HTML...');

        const htmlFiles = fs.readdirSync(this.projectRoot)
            .filter(file => file.endsWith('.html') &&
                    !['index.html', 'admin-dashboard.html'].includes(file))
            .slice(0, 10); // Limitar para performance

        let devScriptsFound = 0;

        for (const file of htmlFiles) {
            const filePath = path.join(this.projectRoot, file);
            const content = fs.readFileSync(filePath, 'utf8');

            if (content.includes('dev-override.js') || content.includes('dev-credentials.js')) {
                devScriptsFound++;
                this.warnings.push(`‚ö†Ô∏è ${file}: Contiene scripts de desarrollo`);
            }
        }

        if (devScriptsFound === 0) {
            this.passed.push(`‚úÖ Otros archivos HTML: Sin scripts de desarrollo detectados`);
        }
    }

    /**
     * Verificar variables de entorno
     */
    async checkEnvironmentVariables() {
        console.log('üìã Verificando variables de entorno...');

        const envFiles = ['.env', '.env.production', '.env.local'];
        let envFound = false;

        for (const envFile of envFiles) {
            const envPath = path.join(this.projectRoot, envFile);
            if (fs.existsSync(envPath)) {
                envFound = true;
                this.passed.push(`‚úÖ Archivo de entorno encontrado: ${envFile}`);
            }
        }

        if (!envFound) {
            this.warnings.push('‚ö†Ô∏è No se encontraron archivos de entorno (.env)');
        }
    }

    /**
     * Verificar Service Workers
     */
    async checkServiceWorkers() {
        console.log('üìã Verificando Service Workers...');

        const swFiles = ['sw.js', 'sw-offline-first.js', 'public/sw.js', 'public/sw-offline-first.js'];

        for (const swFile of swFiles) {
            const swPath = path.join(this.projectRoot, swFile);
            if (fs.existsSync(swPath)) {
                this.passed.push(`‚úÖ Service Worker encontrado: ${swFile}`);
            }
        }
    }

    /**
     * Generar reporte final
     */
    generateReport() {
        const executionTime = Date.now() - this.startTime;

        console.log('\n' + '='.repeat(80));
        console.log('üìä REPORTE DE VERIFICACI√ìN DE CONFIGURACI√ìN DE PRODUCCI√ìN');
        console.log('='.repeat(80));

        console.log(`\n‚úÖ VERIFICACIONES EXITOSAS (${this.passed.length}):`);
        this.passed.forEach(item => console.log(`   ${item}`));

        if (this.warnings.length > 0) {
            console.log(`\n‚ö†Ô∏è ADVERTENCIAS (${this.warnings.length}):`);
            this.warnings.forEach(item => console.log(`   ${item}`));
        }

        if (this.errors.length > 0) {
            console.log(`\n‚ùå ERRORES CR√çTICOS (${this.errors.length}):`);
            this.errors.forEach(item => console.log(`   ${item}`));
        }

        console.log('\n' + '='.repeat(80));
        console.log('üìà RESUMEN:');
        console.log(`   ‚úÖ Exitosas: ${this.passed.length}`);
        console.log(`   ‚ö†Ô∏è Advertencias: ${this.warnings.length}`);
        console.log(`   ‚ùå Errores: ${this.errors.length}`);
        console.log(`   ‚è±Ô∏è Tiempo de ejecuci√≥n: ${executionTime}ms`);

        const status = this.errors.length === 0 ?
            (this.warnings.length === 0 ? 'üü¢ LISTO PARA PRODUCCI√ìN' : 'üü° LISTO CON ADVERTENCIAS') :
            'üî¥ REQUIERE CORRECCIONES';

        console.log(`   üéØ Estado: ${status}`);
        console.log('='.repeat(80));

        // Salir con c√≥digo de error si hay errores cr√≠ticos
        if (this.errors.length > 0) {
            process.exit(1);
        }
    }
}

// Ejecutar verificaci√≥n si es llamado directamente
if (require.main === module) {
    const verifier = new ProductionConfigVerifier();
    verifier.runAllChecks().catch(error => {
        console.error('‚ùå Error durante la verificaci√≥n:', error);
        process.exit(1);
    });
}

module.exports = ProductionConfigVerifier;