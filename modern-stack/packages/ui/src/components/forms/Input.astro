---
export interface Props {
  type?: 'text' | 'email' | 'password' | 'tel' | 'url' | 'search' | 'number';
  name: string;
  id?: string;
  label?: string;
  placeholder?: string;
  value?: string;
  required?: boolean;
  disabled?: boolean;
  error?: string;
  helpText?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'outlined' | 'filled';
  class?: string;
  'data-testid'?: string;
}

const {
  type = 'text',
  name,
  id = name,
  label,
  placeholder,
  value,
  required = false,
  disabled = false,
  error,
  helpText,
  size = 'md',
  variant = 'default',
  class: className = '',
  'data-testid': testId,
  ...rest
} = Astro.props;

// Base classes
const baseClasses = [
  'w-full',
  'transition-all',
  'duration-200',
  'focus:outline-none',
  'focus:ring-2',
  'focus:ring-blue-500',
  'focus:border-transparent',
  'disabled:opacity-50',
  'disabled:cursor-not-allowed',
  'disabled:bg-gray-50',
  'dark:disabled:bg-gray-800'
];

// Variant classes
const variantClasses = {
  default: [
    'border',
    'border-gray-300',
    'dark:border-gray-600',
    'bg-white',
    'dark:bg-gray-800',
    'text-gray-900',
    'dark:text-gray-100',
    'placeholder-gray-500',
    'dark:placeholder-gray-400'
  ],
  outlined: [
    'border-2',
    'border-gray-300',
    'dark:border-gray-600',
    'bg-transparent',
    'text-gray-900',
    'dark:text-gray-100',
    'placeholder-gray-500',
    'dark:placeholder-gray-400',
    'focus:border-blue-500'
  ],
  filled: [
    'border-0',
    'bg-gray-100',
    'dark:bg-gray-700',
    'text-gray-900',
    'dark:text-gray-100',
    'placeholder-gray-500',
    'dark:placeholder-gray-400',
    'focus:bg-white',
    'dark:focus:bg-gray-800'
  ]
};

// Size classes
const sizeClasses = {
  sm: ['px-3', 'py-2', 'text-sm', 'rounded-md'],
  md: ['px-4', 'py-2.5', 'text-sm', 'rounded-lg'],
  lg: ['px-4', 'py-3', 'text-base', 'rounded-lg']
};

// Error state classes
const errorClasses = error ? [
  'border-red-500',
  'focus:ring-red-500',
  'focus:border-red-500',
  'text-red-900',
  'dark:text-red-100',
  'placeholder-red-500'
] : [];

const classes = [
  ...baseClasses,
  ...variantClasses[variant],
  ...sizeClasses[size],
  ...errorClasses,
  className
].join(' ');

const labelClasses = [
  'block',
  'text-sm',
  'font-medium',
  'mb-2',
  error ? 'text-red-700 dark:text-red-400' : 'text-gray-700 dark:text-gray-300'
].join(' ');
---

<div class="w-full">
  {label && (
    <label 
      for={id}
      class={labelClasses}
    >
      {label}
      {required && (
        <span class="text-red-500 ml-1" aria-label="required">*</span>
      )}
    </label>
  )}
  
  <div class="relative">
    <input
      type={type}
      name={name}
      id={id}
      class={classes}
      placeholder={placeholder}
      value={value}
      required={required}
      disabled={disabled}
      data-testid={testId}
      {...rest}
    />
    
    {Astro.slots.icon && (
      <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
        <slot name="icon" />
      </div>
    )}
    
    {error && (
      <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
        <i class="fas fa-exclamation-circle text-red-500" aria-hidden="true"></i>
      </div>
    )}
  </div>
  
  {(error || helpText) && (
    <div class="mt-2">
      {error && (
        <p class="text-sm text-red-600 dark:text-red-400" id={`${id}-error`}>
          <i class="fas fa-exclamation-triangle mr-1" aria-hidden="true"></i>
          {error}
        </p>
      )}
      
      {!error && helpText && (
        <p class="text-sm text-gray-500 dark:text-gray-400" id={`${id}-help`}>
          {helpText}
        </p>
      )}
    </div>
  )}
</div>

<style>
  /* Custom input animations */
  input {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Focus ring animation */
  input:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  /* Error state animation */
  input.error:focus {
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }
  
  /* Autofill styling */
  input:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset;
    -webkit-text-fill-color: #1f2937;
  }
  
  .dark input:-webkit-autofill {
    box-shadow: 0 0 0 1000px #1f2937 inset;
    -webkit-text-fill-color: #f9fafb;
  }
  
  /* Remove native search input styling */
  input[type="search"]::-webkit-search-cancel-button,
  input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
    appearance: none;
  }
  
  /* Number input styling */
  input[type="number"]::-webkit-outer-spin-button,
  input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  input[type="number"] {
    -moz-appearance: textfield;
  }
</style>