---
export interface Props {
  name: string;
  id?: string;
  label?: string;
  placeholder?: string;
  value?: string;
  rows?: number;
  required?: boolean;
  disabled?: boolean;
  error?: string;
  helpText?: string;
  maxLength?: number;
  resize?: 'none' | 'vertical' | 'horizontal' | 'both';
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'outlined' | 'filled';
  class?: string;
  'data-testid'?: string;
}

const {
  name,
  id = name,
  label,
  placeholder,
  value,
  rows = 4,
  required = false,
  disabled = false,
  error,
  helpText,
  maxLength,
  resize = 'vertical',
  size = 'md',
  variant = 'default',
  class: className = '',
  'data-testid': testId,
  ...rest
} = Astro.props;

// Base classes
const baseClasses = [
  'w-full',
  'transition-all',
  'duration-200',
  'focus:outline-none',
  'focus:ring-2',
  'focus:ring-blue-500',
  'focus:border-transparent',
  'disabled:opacity-50',
  'disabled:cursor-not-allowed',
  'disabled:bg-gray-50',
  'dark:disabled:bg-gray-800'
];

// Variant classes
const variantClasses = {
  default: [
    'border',
    'border-gray-300',
    'dark:border-gray-600',
    'bg-white',
    'dark:bg-gray-800',
    'text-gray-900',
    'dark:text-gray-100',
    'placeholder-gray-500',
    'dark:placeholder-gray-400'
  ],
  outlined: [
    'border-2',
    'border-gray-300',
    'dark:border-gray-600',
    'bg-transparent',
    'text-gray-900',
    'dark:text-gray-100',
    'placeholder-gray-500',
    'dark:placeholder-gray-400',
    'focus:border-blue-500'
  ],
  filled: [
    'border-0',
    'bg-gray-100',
    'dark:bg-gray-700',
    'text-gray-900',
    'dark:text-gray-100',
    'placeholder-gray-500',
    'dark:placeholder-gray-400',
    'focus:bg-white',
    'dark:focus:bg-gray-800'
  ]
};

// Size classes
const sizeClasses = {
  sm: ['px-3', 'py-2', 'text-sm', 'rounded-md'],
  md: ['px-4', 'py-2.5', 'text-sm', 'rounded-lg'],
  lg: ['px-4', 'py-3', 'text-base', 'rounded-lg']
};

// Resize classes
const resizeClasses = {
  none: 'resize-none',
  vertical: 'resize-y',
  horizontal: 'resize-x',
  both: 'resize'
};

// Error state classes
const errorClasses = error ? [
  'border-red-500',
  'focus:ring-red-500',
  'focus:border-red-500',
  'text-red-900',
  'dark:text-red-100',
  'placeholder-red-500'
] : [];

const classes = [
  ...baseClasses,
  ...variantClasses[variant],
  ...sizeClasses[size],
  resizeClasses[resize],
  ...errorClasses,
  className
].join(' ');

const labelClasses = [
  'block',
  'text-sm',
  'font-medium',
  'mb-2',
  error ? 'text-red-700 dark:text-red-400' : 'text-gray-700 dark:text-gray-300'
].join(' ');

// Character count logic
const currentLength = value?.length || 0;
const showCharCount = maxLength && maxLength > 0;
const isNearLimit = showCharCount && currentLength > maxLength * 0.8;
const isOverLimit = showCharCount && currentLength > maxLength;
---

<div class="w-full">
  {label && (
    <div class="flex justify-between items-center mb-2">
      <label 
        for={id}
        class={labelClasses}
      >
        {label}
        {required && (
          <span class="text-red-500 ml-1" aria-label="required">*</span>
        )}
      </label>
      
      {showCharCount && (
        <span class={`text-xs ${isOverLimit ? 'text-red-500' : isNearLimit ? 'text-yellow-500' : 'text-gray-500'}`}>
          {currentLength}/{maxLength}
        </span>
      )}
    </div>
  )}
  
  <div class="relative">
    <textarea
      name={name}
      id={id}
      class={classes}
      placeholder={placeholder}
      value={value}
      rows={rows}
      required={required}
      disabled={disabled}
      maxlength={maxLength}
      data-testid={testId}
      {...rest}
    ></textarea>
    
    {error && (
      <div class="absolute top-3 right-3 flex items-center pointer-events-none">
        <i class="fas fa-exclamation-circle text-red-500" aria-hidden="true"></i>
      </div>
    )}
  </div>
  
  {(error || helpText) && (
    <div class="mt-2">
      {error && (
        <p class="text-sm text-red-600 dark:text-red-400" id={`${id}-error`}>
          <i class="fas fa-exclamation-triangle mr-1" aria-hidden="true"></i>
          {error}
        </p>
      )}
      
      {!error && helpText && (
        <p class="text-sm text-gray-500 dark:text-gray-400" id={`${id}-help`}>
          {helpText}
        </p>
      )}
    </div>
  )}
</div>

<style>
  /* Custom textarea animations */
  textarea {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    min-height: 2.5rem;
  }
  
  /* Focus ring animation */
  textarea:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  /* Error state animation */
  textarea.error:focus {
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }
  
  /* Autofill styling */
  textarea:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset;
    -webkit-text-fill-color: #1f2937;
  }
  
  .dark textarea:-webkit-autofill {
    box-shadow: 0 0 0 1000px #1f2937 inset;
    -webkit-text-fill-color: #f9fafb;
  }
  
  /* Scrollbar styling */
  textarea {
    scrollbar-width: thin;
    scrollbar-color: #d1d5db #f9fafb;
  }
  
  textarea::-webkit-scrollbar {
    width: 8px;
  }
  
  textarea::-webkit-scrollbar-track {
    background: #f9fafb;
    border-radius: 4px;
  }
  
  textarea::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 4px;
  }
  
  textarea::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }
  
  /* Dark mode scrollbar */
  .dark textarea {
    scrollbar-color: #4b5563 #1f2937;
  }
  
  .dark textarea::-webkit-scrollbar-track {
    background: #1f2937;
  }
  
  .dark textarea::-webkit-scrollbar-thumb {
    background: #4b5563;
  }
  
  .dark textarea::-webkit-scrollbar-thumb:hover {
    background: #6b7280;
  }
  
  /* Resize handle styling */
  textarea.resize-y {
    resize: vertical;
  }
  
  textarea.resize-x {
    resize: horizontal;
  }
  
  textarea.resize-none {
    resize: none;
  }
</style>